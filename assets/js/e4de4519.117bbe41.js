"use strict";(self.webpackChunkvelesa_documentation=self.webpackChunkvelesa_documentation||[]).push([[318],{2492:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>d,metadata:()=>a,toc:()=>l});var t=o(4848),i=o(8453);const d={sidebar_position:1,title:"Overview"},s=void 0,a={id:"animation-module/locomotion-component/overview",title:"Overview",description:"The  VELESA Locomotion Component is responsible for multiplayer management of aim",source:"@site/versioned_docs/version-5.3.2/animation-module/locomotion-component/overview.mdx",sourceDirName:"animation-module/locomotion-component",slug:"/animation-module/locomotion-component/overview",permalink:"/VELESA-Documentation/docs/animation-module/locomotion-component/overview",draft:!1,unlisted:!1,editUrl:"https://github.com/CyberKoalaStudios/VELESA-Documentation/edit/master/versioned_docs/version-5.3.2/animation-module/locomotion-component/overview.mdx",tags:[],version:"5.3.2",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Overview"},sidebar:"tutorialSidebar",previous:{title:"Functions",permalink:"/VELESA-Documentation/docs/animation-module/anim-instance/functions"},next:{title:"Functions",permalink:"/VELESA-Documentation/docs/animation-module/locomotion-component/functions"}},c={},l=[{value:"Locomotion Component Settings",id:"locomotion-component-settings",level:2},{value:"Config",id:"config",level:3},{value:"State",id:"state",level:3},{value:"Events",id:"events",level:2},{value:"On Rotation Method Updated",id:"on-rotation-method-updated",level:3},{value:"On Aim Method Updated",id:"on-aim-method-updated",level:3},{value:"On Pose Updated",id:"on-pose-updated",level:3},{value:"On Animation States Updated",id:"on-animation-states-updated",level:3}];function r(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:" VELESA Locomotion Component"})," is responsible for multiplayer management of aim\noffset, rotation methods and animation pose state updates. It works in tandem\nwith the ",(0,t.jsx)(n.code,{children:" VELESA Anim Instance"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"locomotion-component-settings",children:"Locomotion Component Settings"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Locomotion Component Settings",src:o(5277).A+"",width:"661",height:"229"})}),"\n",(0,t.jsx)(n.h3,{id:"config",children:"Config"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Update Allowed by Client"})," : If false, all changes to animation poses done by\nthe client will only be local and never replicated."]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"This value cannot be changed at run-time."})}),"\n",(0,t.jsx)(n.h3,{id:"state",children:"State"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Rotation Method"})," : Controls how the actor is ",(0,t.jsx)(n.a,{href:"/docs/animation-module/types#rotation-method",children:"rotated"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Aim Method"})," : Controls how the actor is ",(0,t.jsx)(n.a,{href:"/docs/animation-module/types#aim-method",children:"aiming"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Pose"})," : Current pose represented by a tag."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Animation States"})," : Gameplay tag container that is used to store animation\nstates."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,t.jsx)(n.h3,{id:"on-rotation-method-updated",children:"On Rotation Method Updated"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"On Rotation Method Updated"})," event will be called when the ",(0,t.jsx)(n.code,{children:"Rotation Method"})," of\nthe component changes."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Old Rotation Method"}),"  : Old actors ",(0,t.jsx)(n.a,{href:"/docs/animation-module/types#rotation-method",children:"rotation method"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"New Rotation Method"}),"  : New actors ",(0,t.jsx)(n.a,{href:"/docs/animation-module/types#rotation-method",children:"rotation method"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"On Rotation Method Updated",src:o(4154).A+"",width:"460",height:"276"})}),"\n",(0,t.jsx)(n.h3,{id:"on-aim-method-updated",children:"On Aim Method Updated"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"On Aim Method Updated"})," event will be called when the ",(0,t.jsx)(n.code,{children:"Aim Method"})," of the component\nchanges."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Old Aim Method"})," : Old actors ",(0,t.jsx)(n.a,{href:"/docs/animation-module/types#aim-method",children:"aim method"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"New Aim Method"}),"  : New actors ",(0,t.jsx)(n.a,{href:"/docs/animation-module/types#aim-method",children:"aim method"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"On Aim Method Updated",src:o(4799).A+"",width:"639",height:"307"})}),"\n",(0,t.jsx)(n.h3,{id:"on-pose-updated",children:"On Pose Updated"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"On Pose Updated"})," event will be called when the ",(0,t.jsx)(n.code,{children:"Pose"})," of the component changes."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Old Pose"}),"  : Old actors pose represented by a tag."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"New Pose"})," : New actors pose represented by a tag."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"On Pose Updated",src:o(8747).A+"",width:"656",height:"383"})}),"\n",(0,t.jsx)(n.h3,{id:"on-animation-states-updated",children:"On Animation States Updated"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"On Animation States Updated"})," event will be called when the ",(0,t.jsx)(n.code,{children:"AnimationStates"})," of\nthe component changes."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Tags Added"}),"  : The array of tags added to ",(0,t.jsx)(n.code,{children:"AnimationStates"}),"\ntag container."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Tags Removed"}),"  : The array of tags removed from\n",(0,t.jsx)(n.code,{children:"AnimationStates"})," tag container."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"On Animation States Updated",src:o(5461).A+"",width:"674",height:"331"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}},5277:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/locomotion-settings-642f35890b3f9367a2817a3c28549830.png"},4799:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/on-aim-method-updated-cb995ce4d936c852b6f3edc261ceea65.png"},5461:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/on-animation-states-updated-22798c527d05ac5b3421b849eba1f4cf.png"},8747:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/on-pose-updated-568708541c9ef3238a62a15cd17c200a.png"},4154:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/on-rotation-method-updated-f173fdb841be0120d804bfd8f5f685aa.png"},8453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>a});var t=o(6540);const i={},d=t.createContext(i);function s(e){const n=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(d.Provider,{value:n},e.children)}}}]);