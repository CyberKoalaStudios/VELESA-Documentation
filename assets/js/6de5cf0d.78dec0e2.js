"use strict";(self.webpackChunkvelesa_documentation=self.webpackChunkvelesa_documentation||[]).push([[132],{6013:(e,n,t)=>{t.d(n,{a3:()=>s,f4:()=>r,pn:()=>c});var i=t(4848),o=t(8453);const c=({children:e,text:n})=>{const t={span:"span",...(0,o.R)()};return(0,i.jsx)(t.span,{style:{backgroundColor:"#822",color:"#faa",border:"1px #faa solid",borderRadius:"5rem",padding:".2rem .4rem",fontSize:".6rem"},children:n})},r=({children:e})=>{const n={span:"span",...(0,o.R)()};return(0,i.jsx)(n.span,{style:{color:"#faa"},children:e})};function l(e,n,t,c){const r={div:"div",...(0,o.R)()};return(0,i.jsx)(r.div,{style:{backgroundColor:c,color:t,border:"1px "+t+" solid",borderRadius:"5px",padding:".1rem .4rem"},children:n})}const s=({children:e})=>l(0,"Released","#afa","#181")},6410:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>l,toc:()=>a});var i=t(4848),o=t(8453);t(6013);const c={sidebar_position:4,title:"Blueprint Function Library"},r=void 0,l={id:"projectile-module/bpfl",title:"Blueprint Function Library",description:"Get Projectile Launcher Component",source:"@site/versioned_docs/version-5.3.2/projectile-module/bpfl.mdx",sourceDirName:"projectile-module",slug:"/projectile-module/bpfl",permalink:"/VELESA-Documentation/docs/projectile-module/bpfl",draft:!1,unlisted:!1,editUrl:"https://github.com/CyberKoalaStudios/VELESA-Documentation/edit/master/versioned_docs/version-5.3.2/projectile-module/bpfl.mdx",tags:[],version:"5.3.2",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Blueprint Function Library"},sidebar:"tutorialSidebar",previous:{title:"Types",permalink:"/VELESA-Documentation/docs/projectile-module/types"},next:{title:"Blueprint Function Library",permalink:"/VELESA-Documentation/docs/core-module/bpfl"}},s={},a=[{value:"Get Projectile Launcher Component",id:"get-projectile-launcher-component",level:2},{value:"Cursor Aim",id:"cursor-aim",level:2},{value:"Camera Aim",id:"camera-aim",level:2},{value:"Build Actor List",id:"build-actor-list",level:2},{value:"Angle of Emergence",id:"angle-of-emergence",level:2},{value:"Find Velocity Rotation",id:"find-velocity-rotation",level:2},{value:"Find Actor Velocity Rotation",id:"find-actor-velocity-rotation",level:2}];function d(e){const n={br:"br",code:"code",h2:"h2",img:"img",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"get-projectile-launcher-component",children:"Get Projectile Launcher Component"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Get Projectile Launcher Component"})," gets the VELESA Projectile Launcher component\nfrom an actor."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Actor"})," : The actor from which to get the component."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Get Projectile Launcher Component",src:t(2823).A+"",width:"389",height:"157"})}),"\n",(0,i.jsxs)(n.p,{children:["Returns ",(0,i.jsx)(n.code,{children:"Projectile Launcher Component"})," or null if not found."]}),"\n",(0,i.jsx)(n.h2,{id:"cursor-aim",children:"Cursor Aim"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Cursor Aim"})," performs a trace collision query under the mouse cursor to detect\nwhere the player is aiming at.\nIn case of a detected hit, also calculates the rotation needed to look at the\nimpact point from the given origin."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Aim Origin"})," : The location to aim from."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Player Controller"}),"  : Player controller that controls\nthe cursor."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Trace Channel"}),"  : Collision channel to use for the trace."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Trace Complex"}),"  : True to test against complex collision,\nfalse to test against simplified collision."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Cursor Aim",src:t(1304).A+"",width:"534",height:"375"})}),"\n",(0,i.jsxs)(n.p,{children:["If the trace was successful, returns ",(0,i.jsx)(n.code,{children:"Aim at Location"}),"\nthe location of the impact point under the cursor,\n",(0,i.jsx)(n.code,{children:"Look at Rotation"})," the rotation needed to look at the impact\npoint of a detected object the cursor is aiming at and\n",(0,i.jsx)(n.code,{children:"Hit Result"}),"  the hit result of the line trace."]}),"\n",(0,i.jsx)(n.h2,{id:"camera-aim",children:"Camera Aim"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Camera Aim"})," calculates the location and rotation of where the player controller\nis aiming at. The aim point is the center of the screen, but it can be any\noffset if needed."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Aim Origin"}),"  : The location to aim from."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Player Controller"}),"   : Player controller that controls\nthe camera."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Trace Distance"})," : The distance to trace from the screen\nposition into the world."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Trace Channel"})," : The collision channel to use for the trace."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Trace Complex"}),"  : True to test against complex collision,\nfalse to test against simplified collision."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Actors to Ignore"})," : The list of actors to ignore during\nthe trace."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Screen Space Aim Coords"})," : The screen-space coordinates\n(0-1) for the trace starting point."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Camera Aim",src:t(3383).A+"",width:"572",height:"426"})}),"\n",(0,i.jsxs)(n.p,{children:["If the trace was successful, returns ",(0,i.jsx)(n.code,{children:"Aim at Location"}),"\nthe location the camera is aiming at, ",(0,i.jsx)(n.code,{children:"Look at Rotation"}),(0,i.jsx)(n.br,{}),"\n","the rotation needed to look at the impact point of a detected object the camera\nis aiming at and ",(0,i.jsx)(n.code,{children:"Hit Result"}),"  the hit result of the line trace."]}),"\n",(0,i.jsx)(n.h2,{id:"build-actor-list",children:"Build Actor List"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Build Actor List"})," builds a list of all actors attached to the given owner and\nits instigator. The owner and instigator will be included in this list."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Owner"}),"  : The owner from which to get all actors."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Build Actor List",src:t(3407).A+"",width:"290",height:"218"})}),"\n",(0,i.jsx)(n.h2,{id:"angle-of-emergence",children:"Angle of Emergence"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Angle of Emergence"})," calculates the angle of emergence (exit) in\nradians, representing the alignment of the velocity direction with the hit\nnormal."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Velocity"})," : Input velocity vector."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Hit Normal"}),"  : Input hit normal vector."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Angle of Emergence",src:t(6331).A+"",width:"360",height:"206"})}),"\n",(0,i.jsx)(n.h2,{id:"find-velocity-rotation",children:"Find Velocity Rotation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Find Velocity Rotation"})," finds worlds-space rotation from objects location and\nvelocity."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Location"})," : The starting location for the rotation\ncalculation."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Velocity"}),"   : The velocity vector indicating the direction to\nlook towards."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Find Velocity Rotation",src:t(5908).A+"",width:"309",height:"174"})}),"\n",(0,i.jsx)(n.h2,{id:"find-actor-velocity-rotation",children:"Find Actor Velocity Rotation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Find Actor Velocity Rotation"})," finds world-space absolute rotation of an actor\nbased on its velocity XYZ."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Target"}),"   : The target actor used for the rotation calculation."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Find Actor Velocity Rotation",src:t(9496).A+"",width:"353",height:"193"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},6331:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/angle-of-emergence-46c286f629499d1483c9d96344ce2e97.png"},3407:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/build-actor-list-6bc2b4c502ff41e4ee170a20cc5d5228.png"},3383:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/camera-aim-58171ebfee4cb282bde1e5abbc8bcd96.png"},1304:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/cursor-aim-93bf8f314dcdaa1eedc384f5640548eb.png"},9496:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/find-actor-velocity-rotation-f5253dc8722776cb61608b0fb584b4aa.png"},5908:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/find-velocity-rotation-f354b1d4c3b82c0eb73efe62b05de36b.png"},2823:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/get-projectile-launcher-component-5203bd98b95ed626d3763dafd73a1b5b.png"},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(6540);const o={},c=i.createContext(o);function r(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);